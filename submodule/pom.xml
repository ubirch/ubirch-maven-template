<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2019 ubirch GmbH
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!-- link to our parent -->
  <parent>
    <groupId>ubirch</groupId>
    <artifactId>ubirch-maven-template</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>submodule</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <name>submodule [${project.version}]</name>
  <description>a submodule description</description>

  <organization>
    <name>ubirch GmbH</name>
    <url>https://ubirch.com/</url>
  </organization>

  <!-- properties related to the submodule -->
  <properties>
    <!-- main class is used for jar creation -->
    <main.class>com.ubirch.submodule.Main</main.class>
    <!-- the port to be opened in docker -->
    <service.port>5225</service.port>
    <!-- the build number will be overriden by goCD -->
    <build.number>${timestamp}-dev</build.number>

    <!-- add version for dependencies here -->
    <config.version>1.3.3</config.version>
  </properties>

  <!-- module dependencies that are not common to all projects -->
  <!-- remove any dependencies you do not need -->
  <dependencies>
    <!-- scala, logging etc. -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.scala-logging</groupId>
      <artifactId>scala-logging_${scala.major.version}</artifactId>
      <version>${scala-logging.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback-classic.version}</version>
    </dependency>

    <!-- akka -->
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-actor_${scala.major.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-testkit_${scala.major.version}</artifactId>
      <version>${akka.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-stream_${scala.major.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http_${scala.major.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-http-spray-json_${scala.major.version}</artifactId>
      <version>${akka.http.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-slf4j_${scala.major.version}</artifactId>
      <version>${akka-slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-cluster_${scala.major.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-cluster-tools_${scala.major.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <!-- kafka -->
    <dependency>
      <groupId>net.cakesolutions</groupId>
      <artifactId>scala-kafka-client_${scala.major.version}</artifactId>
      <version>${simple.kafka.client.version}</version>
    </dependency>

    <!-- test dependencies -->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.major.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-scala_${scala.major.version}</artifactId>
      <version>${mockito.scala.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- other dependencies -->

    <dependency>
      <groupId>com.typesafe</groupId>
      <artifactId>config</artifactId>
      <version>${config.version}</version>
    </dependency>
  </dependencies>

  <!-- definition of the build process -->
  <build>
    <plugins>
      <!-- scala/java compilation -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${scala-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <recompileMode>incremental</recompileMode>
        </configuration>
      </plugin>
      <!-- disable surefire -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <!-- enable scalatest -->
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <version>1.0</version>
        <configuration>
          <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          <junitxml>.</junitxml>
          <filereports>WDF TestSuite.txt</filereports>
        </configuration>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- the license plugin creates a list of licenses used in the module -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <id>attach-licenses</id>
            <goals>
              <goal>add-third-party</goal>
            </goals>
            <configuration>
              <thirdPartyFilename>licenses.txt</thirdPartyFilename>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- this is the main artefacts jar file with the executable class -->
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>${main.class}</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <!-- DOCKER: remove if not used -->
      <!-- copy all dependencies into the target/lib dir for our docker image -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.8</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <overWriteReleases>false</overWriteReleases>
              <includeScope>runtime</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- create and/or push the created docker image -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>1.4.4</version>
        <executions>
          <execution>
            <id>default</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <buildDirectory>${project.build.outputDirectory}</buildDirectory>
          <repository>ubirch/${project.artifactId}</repository>
          <tag>${build.number}</tag>
          <buildArgs>
            <VERSION>${project.version}</VERSION>
            <BUILD>${build.number}</BUILD>
            <SERVICE_NAME>${project.name}</SERVICE_NAME>
            <SERVICE_PORT>${service.port}</SERVICE_PORT>
            <JAR_LIBS>target/lib</JAR_LIBS>
            <JAR_FILE>target/${project.build.finalName}.${project.packaging}</JAR_FILE>
          </buildArgs>
        </configuration>
      </plugin>
      <!-- DOCKER END -->
      <!-- for mvn deploy to work, disable the default deploy plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.2</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
